// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Benchmark {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Hardware info
  cpuModel       String
  gpuModel       String?
  ramGB          Int
  os             String

  // Test parameters
  codec          String
  preset         String
  crf            Int?

  // Results
  fps            Float
  vmaf           Float?
  fileSizeBytes  Int

  notes          String?

  // Aggregation
  samples        Int      @default(0)
  vmafSamples    Int      @default(0)

  // Submission metadata
  status         String   @default("pending") // pending | accepted | rejected
  ffmpegVersion  String?
  encoderName    String?
  clientVersion  String?
  inputHash      String?
  runMs          Int?

  // Idempotency and deduplication
  payloadHash    String?  @unique

  @@index([createdAt])
  @@index([status])
  @@index([codec])
  @@index([preset])
  @@index([inputHash])
  @@index([codec, preset])
  // Ensure a single row per hardware/preset/params combination
  @@unique([cpuModel, gpuModel, ramGB, os, codec, preset, crf])
}

model Submission {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Hardware info
  cpuModel       String
  gpuModel       String?
  ramGB          Int
  os             String

  // Test parameters
  codec          String
  preset         String
  crf            Int?

  // Results
  fps            Float
  vmaf           Float?
  fileSizeBytes  Int
  notes          String?

  // Submission metadata
  ffmpegVersion  String?
  encoderName    String?
  clientVersion  String?
  inputHash      String?
  runMs          Int?

  // Quality evaluation
  status         String   @default("pending") // pending | accepted | rejected | suspect
  qualityScore   Float?

  // Idempotency and deduplication
  payloadHash    String?  @unique

  // API key linkage (beta: invite-only)
  apiKeyId       String?
  apiKey         ApiKey?  @relation(fields: [apiKeyId], references: [id])

  @@index([createdAt])
  @@index([status])
  @@index([codec])
  @@index([preset])
  @@index([codec, preset])
  @@index([cpuModel, gpuModel, ramGB, os, codec, preset, crf])
  @@index([apiKeyId])
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String?  @unique
  role      String   @default("user") // user | admin

  apiKeys   ApiKey[]
}

model ApiKey {
  id             String    @id @default(cuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Optional owner (invite-only beta can omit user)
  userId         String?
  user           User?     @relation(fields: [userId], references: [id])

  name           String
  hash           String    @unique // sha256(apiKey plaintext) hex
  status         String    @default("active") // active | revoked | banned
  quotaPerMinute Int       @default(30)
  quotaPerDay    Int       @default(1000)
  usedCount      Int       @default(0)
  lastUsedAt     DateTime?

  submissions    Submission[]

  @@index([userId])
  @@index([status])
}
